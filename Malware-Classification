#!/usr/bin/env python
# coding: utf-8

# # Decision Tree Classifier Building in Scikit-learn
# Importing Required Libraries
# Let's first load the required libraries.

# In[1]:


# Load libraries
import pandas as pd
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation


# # Loading Data
# Let's first load the required Pima Indian Diabetes dataset using pandas' read CSV function. 

# In[2]:


# col_names = ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree', 'age', 'label']
# load dataset
data = pd.read_csv("data.csv")
data_or = data.copy()


# In[3]:


data.head()


# # Feature Selection
# Here, you need to divide given columns into two types of variables dependent(or target variable) and independent variable(or feature variables).

# In[4]:


#split dataset in features and target variable
data['Class'] = data.Class.map({'Benign':0, 'Malware':1})
feature_cols = ['Requested', 'Response', 'Detections', 'Total']
X = data[feature_cols] # Features
Y = data.Class # Target variable


# In[5]:


data.head()


# # Splitting Data
# To understand model performance, dividing the dataset into a training set and a test set is a good strategy.

# In[6]:


# Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=1) # 70% training and 30% test


# # Building Decision Tree Model
# Let's create a Decision Tree Model using Scikit-learn.

# In[7]:


# Create Decision Tree classifer object
clf = DecisionTreeClassifier()

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)


# # Evaluating Model
# Let's estimate, how accurately the classifier or model can predict the type of cultivars.
# Accuracy can be computed by comparing actual test set values and predicted values.

# In[8]:


# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))


# In[ ]:





# In[ ]:




